require('@tensorflow/tfjs-node');
const tf = require('@tensorflow/tfjs');
const loadCSV = require('./load-csv');
const dataCSV = require('./data-csv');
const LinearRegression = require('./liner-regression-faster') // faster version
const plot = require('node-remote-plot')
const numeral = require('numeral');
/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
                                  What is the Bill Amount in year for give month
------------------------------------------------------------------------------------ */




/* -------------- Step 1: Identify data that is relevant to the problem --------------*/
/* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
let { features, labels, testFeatures, testLabels } = loadCSV('maysales.csv', {
  shuffle: true,
  splitTest: 60000, // half of features data 
  dataColumns: ['account', 'billquantity'],//'year',,'month'
  labelColumns: ['billamount']
});


/* make sure data loaded
console.log('features :', features);
console.log('labels - bill :', labels);
console.log('-----------------------------');
console.log('testFeatures :', testFeatures);
console.log('testLabels - bill :', testLabels);

testFeatures : [
  'account','billquantity'
  [ 206798986, 645 ],
  [ 503687263, 1434 ],
  [ 201070657, 1663 ],
  [ 300243565, 839 ],
  [ 550634709, 2269 ],
  [ 206929861, 750 ],
  [ 553466453, 479 ],
  [ 555447332, 1270 ],
  [ 302918333, 569 ],
  [ 303536305, 832 ]
]
testLabels - billamount : [
  [ 1289.88 ], [ 2314.36 ],
  [ 2941.58 ], [ 1105.89 ],
  [ 3808.41 ], [ 1439.06 ],
  [ 1057.86 ], [ 2209.73 ],
  [ 1181.9 ],  [ 1509.25 ]
]

*/
/* --------------Step 3: Decide on the type of output you are predicting --------------*/
/* This is Regression  type  */

/* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
/* Algorithm = Linear Regression */

// new instance
const regression = new LinearRegression(features, labels, {
  learningRate: 0.1,
  iterations: 15,
  batchSize: 20  // no of records in a batch

});

// call train
regression.train();
// let B = regression.weights.get(0, 0)
// let M = regression.weights.get(1, 0)
// console.log('Updated B is :', numeral(B).format('0,0.00'))  // B = Updated B is : 14,367.89
// console.log('Updated M is :', numeral(M).format('0,0.00'))  // M = Updated M is :   -712.61


// call test only development mode
// const R2 = regression.test(testFeatures, testLabels);
// const R2_ = numeral(100 * R2).format('0,0.00');
// console.log('Coefficent of Determination : ', R2_, '%', '|', R2); // Coefficent of Determination :  99.25 % | 0.9924877544261357

// plot({
//   x: regression.mseHistory.reverse(),
//   xLabel: 'Iteration #',
//   yLabel: 'Mean Squared Error'
// });

// plot({
//   x: regression.bHistory,
//   y: regression.mseHistory.reverse(),
//   xLabel: 'Value of B',
//   yLabel: 'Mean Squared Error'
// });



/* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
/*      observations 
         [
               ['account', 'billquantity'],
               ['account', 'billquantity'],
               ['account', 'billquantity']
         ]  
   */
let { observations } = dataCSV('junesales.csv', { dataColumns: ['account', 'billquantity'] });


// console.log(' observations (account,billquantity)  : ', observations);
const observations1 = [
  [206802276, 2324], [502228270, 586], [205133587, 263],
  [300929435, 2820], [551804921, 1526], [205364922, 1395],
  [554331737, 28351], [555120425, 818], [303713762, 705],
  [400132594, 582], [402712093, 1092], [403438407, 2349]
]

const predictBillAmount = regression.predictBillAmount(observations);
const BillAmount = predictBillAmount.sum(0);
/*
console.log(' --------- Predict BillAmount  --------- ',);
predictBillAmount.print();

console.log('---------  Predict Total BillAmount  ---------  ',);
BillAmount.print();
*/
console.log(' Predict Total Bill Amount  : ', numeral((BillAmount.get(0) / 1000000000)).format('0,0.00'), ' Billions');    //BillAmount  :  1637811584,


/*
  observations (account,billquantity)  :  [ ]
Tensorcls
    [
     [4770.0683594 ],
     [5821.171875  ],
     [5568.2744141 ],
     [10366.0214844],
     [4989.2021484 ],
     [3448.9140625 ],
     [5225.5263672 ],
     [4880.0175781 ],
     [4345.1699219 ],
     [7340.6083984 ]
    ]
*/

/* ----------------------------  Step 6: END ----------------------------*/
