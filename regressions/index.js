require('@tensorflow/tfjs-node');
const tf = require('@tensorflow/tfjs');
const loadCSV = require('./load-csv');
// const LinearRegression = require('./liner-regression-slow') // slow version
const LinearRegression = require('./liner-regression-faster') // faster version
const plot = require('node-remote-plot')

/* -------------- --------------  Fundamentals -------------- -------------- -------------- 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
-------------- -------------- -------------- -------------- -------------- -------------- */

/* -------------- --------------  Goal >  -------------- -------------- -------------- 
                                  What is the Miles Per Gallon of a car for given horsepower
-------------- -------------- -------------- -------------- -------------- -------------- */




/* -------------- Step 1: Identify data that is relevant to the problem --------------*/
/* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
let { features, labels, testFeatures, testLabels } = loadCSV('cars.csv', {
  shuffle: true,
  splitTest: 50,
  dataColumns: ['horsepower', 'weight', 'displacement'],
  labelColumns: ['mpg']
});

/* make sure data loaded
console.log('features - horsepower :', features)
console.log('labels - mpg :', labels) 
console.log('testFeatures - horsepower :', testFeatures)
console.log('testLabels - mpg :', testLabels)
testFeatures - horsepower : [
  [ 153 ], [ 58 ],
  [ 95 ],  [ 225 ],
  [ 115 ], [ 46 ],
  [ 110 ], [ 105 ],
  [ 110 ], [ 95 ]
]
testLabels - mpg : [
  [ 14 ],   [ 36 ],
  [ 22 ],   [ 12 ],
  [ 21.6 ], [ 26 ],
  [ 23.5 ], [ 26.6 ],
  [ 24 ],   [ 20 ]
]

*/
/* --------------Step 3: Decide on the type of output you are predicting --------------*/
/* This is Regression  type  */

/* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
/* Algorithm = LinearRegression */

// new instance
const regression = new LinearRegression(features, labels, {
  learningRate: 0.1,
  iterations: 10,
  batchSize: 10  // no of records in batch
});

// call train
regression.train();

// console.log('Updated M is :', regression.weights.get(1,0))
// console.log('Updated B is :', regression.weights.get(0,0))


/*
// call test only development mode
const R2 = Math.round(100 * regression.test(testFeatures, testLabels));
const R2_ = regression.test(testFeatures, testLabels);

plot({
  x: regression.mseHistory.reverse(),
  xLabel: 'Iteration #',
  yLabel: 'Mean Squared Error'
});

// plot({
//   x:regression.bHistory,
//   y: regression.mseHistory.reverse(),
//   xLabel:'Value of B',
//   yLabel:'Mean Squared Error'
// });
console.log(' Coefficent of Determination : ', R2, '%', '|', R2_);
*/

/* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
/*      observations 
         [
             ['horsepower', 'weight', 'displacement'],
             ['horsepower', 'weight', 'displacement'],
             ['horsepower', 'weight', 'displacement']
         ]  
   */
const observations = [
  [120, 2, 380],
  [135, 2.1, 420],
]
console.log(' observations : ', observations);
const predictionMPG = regression.predict(observations);
predictionMPG.print();



/* -------------- Step 6: END --------------*/
