require('@tensorflow/tfjs-node');
const tf = require('@tensorflow/tfjs');
const loadCSV = require('./load-csv');
const LinearRegression = require('./liner-regression-faster') // faster version
const plot = require('node-remote-plot')

/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
                                  What is the Damage in year for give rainfall
------------------------------------------------------------------------------------ */




/* -------------- Step 1: Identify data that is relevant to the problem --------------*/
/* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
let { features, labels, testFeatures, testLabels } = loadCSV('flood.csv', {
  shuffle: true,
  splitTest: 3, // half of features data
  dataColumns: ['year', 'rainfall'],//'year',
  labelColumns: ['damage']
});
/* make sure data loaded
console.log('features :', features);
console.log('labels - damage :', labels);
console.log('-----------------------------');
console.log('testFeatures :', testFeatures);
console.log('testLabels - damage :', testLabels);
testFeatures : [
[ 2008, 250 ], [ 2012, 136 ], [ 2009, 197 ]
]
testLabels - damage : [
[ 2.1 ], [ 0 ], [ 1.2 ]
]

*/
/* --------------Step 3: Decide on the type of output you are predicting --------------*/
/* This is Regression  type  */

/* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
/* Algorithm = LinearRegression */

// new instance
const regression = new LinearRegression(features, labels, {
  learningRate: 0.1,
  iterations: 10,
  batchSize: 3  // no of records in a batch
});

// call train
regression.train();
// console.log('Updated B is :', regression.weights.get(0, 0)) // B = 3.323472261428833
// console.log('Updated M is :', regression.weights.get(1, 0)) // M = 0.49243712425231934


// call test only development mode
// const R2 = Math.round(100 * regression.test(testFeatures, testLabels));
// const R2_ = regression.test(testFeatures, testLabels);
// console.log(' Coefficent of Determination : ', R2, '%', '|', R2_); //Coefficent of Determination :  98 % | 0.9760684713683359

// plot({
//   x: regression.mseHistory.reverse(),
//   xLabel: 'Iteration #',
//   yLabel: 'Mean Squared Error'
// });

// plot({
//   x: regression.bHistory,
//   y: regression.mseHistory.reverse(),
//   xLabel: 'Value of B',
//   yLabel: 'Mean Squared Error'
// });



/* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
/*      observations 
         [
               ['year', 'rainfall'],
               ['year', 'rainfall'],
               ['year', 'rainfall']
         ]  
   */
const observations = [
  [2019, 240],
  [2020, 260],
  [2021, 300]
]
console.log(' observations (year,rainfall)  : ', observations);
const predictionDamage = regression.predictDamage(observations);
predictionDamage.print();


/*
  observations (year,rainfall)  :  [ [ 2019, 240 ], [ 2020, 260 ], [ 2021, 280 ] ]
Tensor
    [
     [3.7337332],
     [4.1958866],
     [4.6580396]
    ]
*/

/* ----------------------------  Step 6: END ----------------------------*/
