/* eslint-disable no-unused-vars,no-undef  */
import React, { useContext } from 'react';
import { Context as AppContext } from '../context/AppContext';
import SalesTable from './SalesTable';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
// import '@tensorflow/tfjs-node';
import numeral from 'numeral'
import LinearRegression from '../linearregression/liner-regression'
import loadCSV from './load-csv'
import dataCSV from './predict-data-csv'



const Sales = () => {
    const { state: { showComponent, selectedMenu, loading, errorMessage, may2019, june2019 }, } = useContext(AppContext);


    const handlePredict = (fileName) => {
        /* -------------- Step 1: Identify data that is relevant to the problem --------------*/
        /* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
        let { features, labels, testFeatures, testLabels } = loadCSV('aprilsales.csv', {
            shuffle: true,
            splitTest: 60000, // half of features data 
            dataColumns: ['account', 'billquantity'],//'year',,'month'
            labelColumns: ['billamount']
        });

        console.log('testFeatures :', testFeatures);
        console.log('testLabels - bill :', testLabels);
        /* make sure data loaded
       console.log('-----------------------------');
       console.log('features :', features);
       console.log('labels - bill :', labels);
     
       */
        /* --------------Step 3: Decide on the type of output you are predicting --------------*/
        /* This is Regression  type  */

        /* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
        /* Algorithm = Linear Regression */

        // new instance
        const regression = new LinearRegression(features, labels, {
            learningRate: 0.1,
            iterations: 15,
            batchSize: 20  // no of records in a batch

        });
        // call train
        regression.train();


        /* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
        /*      observations 
                 [
                       ['account', 'billquantity'],
                       ['account', 'billquantity'],
                       ['account', 'billquantity']
                 ]  
           */
        let { observations } = dataCSV(fileName, { dataColumns: ['account', 'billquantity'] });

        const predictBillAmount = regression.predictBillAmount(observations);
        const BillAmount = predictBillAmount.sum(0);

        return numeral((BillAmount.get(0) / 1000000000)).format('0,0.00')


    };


    /** for Predict button*/
    const onClick = (action) => {
        const BillAmount = action === 1 ? handlePredict('maysales.csv') : handlePredict('junesales.csv')
        console.log(' Predict Total Bill Amount  : ', BillAmount, ' Billions');    //BillAmount  :  1637811584,

    };




    /** ------------------------------- render on the screen -------------------------------*/
    return (
        <div className="animation">
            <div className="row">
                <div className="col py-3" style={{ paddingTop: '21px', fontSize: '15px' }}>
                    <code>{selectedMenu}
                        <span className="badge badge-success badge-pill ml-1">{showComponent}</span>
                    </code>
                </div>

            </div>
            <hr />
            <div className="row">
                <div className="col-4 py-0 ml-auto" >
                    <button
                        title={`Predict ${selectedMenu} Sales`}
                        type="button"
                        className="btn btn-outline-primary btn-block"
                        style={{ width: '60%', borderRadius: '20px 20px 20px 20px' }}
                        onClick={() => onClick(showComponent)}>
                        <FontAwesomeIcon icon="check" className="mr-2" />
                        {`Predict ${selectedMenu} Sales`}
                    </button>
                </div>

            </div>

            <div className="row">
                <div className="col-10 py-3" style={{ paddingTop: '21px', fontSize: '15px' }}>
                    <SalesTable salesData={showComponent === 1 ? may2019 : june2019} />
                </div>

            </div>
        </div>
    );
}

export default Sales;
